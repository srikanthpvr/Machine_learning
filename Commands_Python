## A Comprehensive List of Python's "Built-in Functions" and "Methods"
**Note:** This is a partial list, as Python offers a vast array of functions and methods across its standard library and various modules.
Methods: We have to use it at the end of the object . Eg: x.append()
Built in functions : We have to pass the arguments in the function.We have to use like a wrapper.Eg:sum([1,2,3])

### Built-in Functions

* **Mathematical Functions:**
  - `abs()`: Returns the absolute value of a number.
  - `divmod()`: Returns the quotient and remainder of division.
  - `max()`: Returns the largest item in an iterable.
  - `min()`: Returns the smallest item in an iterable.
  - `pow()`: Returns the result of a number raised to a power.
  - `round()`: Rounds a number to a specified number of decimal places.
  - `sum()`: Returns the sum of all items in an iterable.

* **Type Conversion Functions:**
  - `int()`: Converts a value to an integer.
  - `float()`: Converts a value to a floating-point number.
  - `str()`: Converts a value to a string.
  - `bool()`: Converts a value to a Boolean.

* **Input/Output Functions:**
  - `print()`: Prints values to the console.
  - `input()`: Reads input from the user.

* **Other Useful Functions:**
  - `len()`: Returns the length of an object.
  - `range()`: Generates a sequence of numbers.
  - `type()`: Returns the type of an object.
  - `isinstance()`: Checks if an object is an instance of a class.

### Common Methods for Data Structures

**Lists:**
  - `append()`: Adds an element to the end of the list.
  - `extend()`: Appends elements from another iterable to the end of the list.
  - `insert()`: Inserts an element at a specific index.
  - `remove()`: Removes the first occurrence of a specified element.
  - `pop()`: Removes and returns an element at a specific index (or the last element if no index is specified).
  - `index()`: Returns the index of the first occurrence of a specified element.
  - `count()`: Returns the number of occurrences of a specified element.
  - `sort()`: Sorts the list in ascending order.
  - `reverse()`: Reverses the order of elements in the list.
  - `clear()`: Removes all elements from the list.
  - `copy()`: Returns a shallow copy of the list.

**Strings:**
  - `upper()`: Converts all characters to uppercase.
  - `lower()`: Converts all characters to lowercase.
  - `strip()`: Removes leading and trailing whitespace.
  - `split()`: Splits the string into a list of substrings.
  - `join()`: Joins elements of an iterable with a separator string.
  - `find()`: Returns the index of the first occurrence of a substring.
  - `replace()`: Replaces occurrences of a substring with another substring.

**Dictionaries:**
  - `keys()`: Returns a view of the dictionary's keys.
  - `values()`: Returns a view of the dictionary's values.
  - `items()`: Returns a view of the dictionary's key-value pairs.
  - `get()`: Returns the value for a key, or a default value if the key is not found.
  - `pop()`: Removes and returns an item with the specified key.
  - `update()`: Updates the dictionary with key-value pairs from another dictionary or iterable.

**For a more comprehensive list and detailed explanations, consult Python's official documentation or use tools like the Python interactive interpreter to explore the available functions and methods.**
 
**Remember to import necessary modules for additional functionalities:**
```python
import math  # For mathematical functions
import random  # For random number generation
import os  # For operating system interactions
import sys  # For system-specific parameters and functions
```
-------------------------------
datetime - python inbuilt
import pandas as pd

# Sample DataFrame with a datetime column
data = {'Date': ['2023-11-23 12:34:56', '2022-12-12 09:15:30']}
df = pd.DataFrame(data)

# Convert the 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Extract the date part
df['Date_Only'] = df['Date'].dt.date
print(df)

EXTRA CODE for accessing the date details
--------------------------------------
data["date"]=data['datetime'].dt.date
data["hr"] = data['datetime'].dt.hour
data["day"] = data['datetime'].dt.day
data["min"] = data['datetime'].dt.minute
data["year"] = data['datetime'].dt.year
data["time"] = data['datetime'].dt.time
-------------------------------

\\\\\\\ There is a DATETIME module in the python\\\\\\\\\\\
**Top 15 Useful Commands from the `datetime` Module**

The `datetime` module in Python is a powerful tool for working with dates and times. Here are 15 of its most useful commands:

1. **`datetime.datetime.now()`:**
   - Returns the current local date and time.

2. **`datetime.date.today()`:**
   - Returns the current local date.

3. **`datetime.datetime.strptime(date_string, format)`:**
   - Parses a string representing a date and time into a datetime object.

4. **`datetime.datetime.strftime(format)`:**
   - Formats a datetime object into a string.

5. **`datetime.timedelta`:**
   - Represents a duration of time.

6. **`datetime.datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)`:**
   - Creates a timedelta object.

7. **`datetime.datetime + timedelta`:**
   - Adds a timedelta to a datetime object.

8. **`datetime.datetime - timedelta`:**
   - Subtracts a timedelta from a datetime object.

9. **`datetime.datetime.year`:**
   - Accesses the year attribute of a datetime object.

10. **`datetime.datetime.month`:**
   - Accesses the month attribute of a datetime object.

11. **`datetime.datetime.day`:**
   - Accesses the day attribute of a datetime object.

12. **`datetime.datetime.hour`:**
   - Accesses the hour attribute of a datetime object.

13. **`datetime.datetime.minute`:**
   - Accesses the minute attribute of a datetime object.

14. **`datetime.datetime.second`:**
   - Accesses the second attribute of a datetime object.

15. **`datetime.datetime.microsecond`:**
   - Accesses the microsecond attribute of a datetime object.

**Example Usage:**

```python
import datetime

# Get current date and time
now = datetime.datetime.now()
print(now)

# Parse a date string
date_string = "2023-11-23 12:34:56"
parsed_date = datetime.datetime.strptime(date_string, "%Y-%m-%d %H:%M:%S")
print(parsed_date)

# Calculate a future date
future_date = now + datetime.timedelta(days=7)
print(future_date)

# Format a date and time
formatted_date = now.strftime("%B %d, %Y %H:%M:%S")
print(formatted_date)
```

By mastering these commands, you can effectively work with dates and times in your Python applications.
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\





